name: API - Build, Push (GHCR) & Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/secretaria-concafras-api:latest

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Descobre automaticamente o .csproj (prefere caminhos com 'Api')
      - name: Find .csproj
        id: findproj
        shell: bash
        run: |
          set -e
          mapfile -t ALL < <(git ls-files '**/*.csproj')
          if [ ${#ALL[@]} -eq 0 ]; then
            echo "Nenhum .csproj encontrado."; exit 1
          fi
          # escolhe o primeiro que contenha 'api' no caminho; se não houver, pega o primeiro
          PICK=""
          for p in "${ALL[@]}"; do
            if echo "$p" | grep -i -q "/api"; then PICK="$p"; break; fi
          done
          if [ -z "$PICK" ]; then PICK="${ALL[0]}"; fi
          DIR="$(dirname "$PICK")"
          DLL="$(basename "$PICK" .csproj).dll"
          echo "proj_path=$PICK" >> "$GITHUB_OUTPUT"
          echo "proj_dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "dll_name=$DLL" >> "$GITHUB_OUTPUT"
          echo "Usando projeto: $PICK (DLL: $DLL)"

      # Gera um Dockerfile CI com base no .csproj encontrado
      - name: Generate CI Dockerfile
        run: |
          cat > Dockerfile.ci <<'DOCKER'
          # build
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY . .
          # restaura e publica somente o projeto escolhido
          ARG PROJ_PATH
          RUN dotnet restore "$PROJ_PATH"
          RUN dotnet publish "$PROJ_PATH" -c Release -o /app/out /p:UseAppHost=false

          # runtime
          FROM mcr.microsoft.com/dotnet/aspnet:8.0
          WORKDIR /app
          ENV ASPNETCORE_URLS=http://+:8080
          COPY --from=build /app/out .
          EXPOSE 8080
          ARG DLL_NAME
          ENTRYPOINT ["dotnet", "DLL_PLACEHOLDER"]
          DOCKER
          # substitui o placeholder pela DLL real
          sed -i "s/DLL_PLACEHOLDER/${{ steps.findproj.outputs.dll_name }}/" Dockerfile.ci
          echo "Dockerfile.ci:"
          sed -n '1,120p' Dockerfile.ci

      - name: Login to GHCR (push com GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.ci
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            PROJ_PATH=${{ steps.findproj.outputs.proj_path }}
            DLL_NAME=${{ steps.findproj.outputs.dll_name }}

      - name: Deploy to VPS (compose pull/up)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          port: 22
          script: |
            set -e
            # se o pacote no GHCR for PRIVADO e você tiver PAT, descomente e configure:
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin || true

            cd /root/apps/secretaria-concafras
            docker compose --env-file .env pull api
            docker compose --env-file .env up -d api
            docker image prune -f
