name: API - Build, Push (GHCR) & Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/secretaria-concafras-api:latest

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Descobre o .csproj principal (prioriza caminhos que contenham "api")
      - name: Find .csproj
        id: findproj
        shell: bash
        run: |
          set -e
          mapfile -t ALL < <(git ls-files '**/*.csproj')
          if [ ${#ALL[@]} -eq 0 ]; then echo "Nenhum .csproj encontrado."; exit 1; fi
          PICK=""
          for p in "${ALL[@]}"; do
            if echo "$p" | grep -i -q "/api"; then PICK="$p"; break; fi
          done
          if [ -z "$PICK" ]; then PICK="${ALL[0]}"; fi
          DLL="$(basename "$PICK" .csproj).dll"
          echo "proj_path=$PICK" >> "$GITHUB_OUTPUT"
          echo "dll_name=$DLL" >> "$GITHUB_OUTPUT"
          echo "Usando projeto: $PICK (DLL: $DLL)"

      # Detecta o SDK via global.json ou pelos TargetFramework(s) dos .csproj
      - name: Detect .NET SDK & runtime tag
        id: dotnetver
        shell: bash
        run: |
          set -e
          SDK=""
          if [ -f global.json ]; then
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y jq >/dev/null 2>&1 || true
            SDK="$(jq -r '.sdk.version // empty' global.json || true)"
          fi

          if [ -z "$SDK" ]; then
            # Coleta TFMs (ex.: net8.0, net9.0) dos csproj do repo
            TFMS="$(grep -RhoE 'net[0-9]+\.[0-9]+' -- '**/*.csproj' | sort -u -V)"
            if [ -z "$TFMS" ]; then
              SDK="8.0.x"
            else
              HIGHEST="$(echo "$TFMS" | tail -n1)"     # pega a maior (version sort)
              MAJOR_MINOR="$(echo "$HIGHEST" | sed -E 's/^net([0-9]+\.[0-9]+)$/\1/')"
              SDK="${MAJOR_MINOR}.x"
            fi
          fi

          RUNTIME_TAG="$(echo "$SDK" | awk -F. '{print $1"."$2}')"
          echo "sdk=$SDK" >> "$GITHUB_OUTPUT"
          echo "runtime_tag=$RUNTIME_TAG" >> "$GITHUB_OUTPUT"
          echo "SDK a instalar: $SDK | Runtime tag da imagem: $RUNTIME_TAG"

      - name: Setup .NET (${{ steps.dotnetver.outputs.sdk }})
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.dotnetver.outputs.sdk }}

      # Restaura e publica no runner (mais rÃ¡pido e evita mismatch de SDK)
      - name: Restore
        run: dotnet restore "${{ steps.findproj.outputs.proj_path }}"
      - name: Publish (Release)
        run: dotnet publish "${{ steps.findproj.outputs.proj_path }}" -c Release -o ./.out/publish /p:UseAppHost=false

      # Dockerfile de runtime alinhado ao SDK detectado (8.0/9.0, etc.)
      - name: Generate runtime Dockerfile
        run: |
          cat > Dockerfile.runtime <<'DOCKER'
          FROM mcr.microsoft.com/dotnet/aspnet:RUNTIME_TAG
          WORKDIR /app
          COPY ./.out/publish .
          ENV ASPNETCORE_URLS=http://+:8080
          EXPOSE 8080
          ENTRYPOINT ["dotnet","DLL_PLACEHOLDER"]
          DOCKER
          sed -i "s/RUNTIME_TAG/${{ steps.dotnetver.outputs.runtime_tag }}/" Dockerfile.runtime
          sed -i "s/DLL_PLACEHOLDER/${{ steps.findproj.outputs.dll_name }}/" Dockerfile.runtime
          echo "---- Dockerfile.runtime ----"
          sed -n '1,120p' Dockerfile.runtime

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.runtime
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Deploy to VPS (compose pull/up)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_KEY }}
          port: 22
          script: |
            set -e
            # Se o pacote no GHCR for PRIVADO, descomente e crie GHCR_USERNAME/GHCR_TOKEN nos Secrets do repo:
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin || true

            cd /root/apps/secretaria-concafras
            docker compose --env-file .env pull api
            docker compose --env-file .env up -d api
            docker image prune -f
